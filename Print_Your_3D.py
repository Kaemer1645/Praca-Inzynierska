# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PrintYour3D
                                 A QGIS plugin
 With this plugin you could print 3D model from your data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Szymek Ślęczka
        email                : szymex23@o2.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

#from __future__ import absolute_import

#import from main libraries
import os
import shutil
import os.path, sys
import time

#import from PyQt
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog, QFileDialog, QApplication
from qgis.core import QgsProject, Qgis, QgsGeometry, QgsFeature, QgsVectorLayer, QgsField,QgsExpression,QgsExpressionContext,QgsExpressionContextUtils, QgsRasterLayer, QgsVectorFileWriter
from qgis.utils import iface, plugins

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .Print_Your_3D_dialog import PrintYour3DDialog

#import from main_code
from .create_model.pySTL import scaleSTL, pySTL
from .create_model import create_model










class PrintYour3D:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        self.stopped = False
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PrintYour3D_{}.qm'.format(locale))
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Print Your 3D')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PrintYour3D', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Print_Your_3D/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Print Your 3D'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Print Your 3D'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ", "", '*.stl')
        self.dlg.lineEdit.setText(filename)

    def run(self):
        """Run method that performs all the real work"""
        self.stopped = False
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PrintYour3DDialog()

            #create buttons
            self.dlg.pushButton.clicked.connect(self.pixels)
            self.dlg.pushButton.clicked.connect(self.stretching)
            self.dlg.pushButton.clicked.connect(self.delaunay)
            self.dlg.pushButton.clicked.connect(self.graph3d)
            self.dlg.pushButton_2.clicked.connect(self.select_output_file)
            self.dlg.pushButton_3.clicked.connect(self.scale)
            self.dlg.pushButton_4.clicked.connect(self.pixels)
            self.dlg.pushButton_4.clicked.connect(self.delaunay)
            self.dlg.pushButton_4.clicked.connect(self.loading)
            self.dlg.pushButton_4.clicked.connect(self.saver)
            self.dlg.pushButton_5.clicked.connect(self.shape)

        # Fetch the currently loaded layers
        self.layers = QgsProject.instance().layerTreeRoot().children()
        #create object of class Create_model
        self.creator = create_model.Create_model(dlg=self.dlg, current_layer=self.layers)
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in self.layers])
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems([layer.name() for layer in self.layers])
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        if result:
            self.iface.messageBar().pushMessage(
                "Success", level=Qgis.Success, duration=3)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    #methods to create buttons
    #import from main code inside create_model.py

    def pixels(self):
        self.creator.iterator()
    def graph3d(self):
        self.creator.create_graph()
    def stretching(self):
        if self.stopped == False:
            self.creator.stretching()
            self.stopped = True
        return self.stopped
    def delaunay(self):
        self.creator.delaunay()
    def saver(self):
        self.creator.saver()
    def shape(self):
        self.creator.shape(self.plugin_dir)
    def loading(self):
        self.creator.loading()
    def scale(self):
        set_scale = scaleSTL.Scalator(dlg = self.dlg)
        set_scale.scaleSTL()
    def scale_print(self):
        print(self.dlg.comboBox_4.currentText())




